<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mattoppenheim</title><link>https://mattoppenheim.github.io/</link><description>Recent content on mattoppenheim</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Wed, 12 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://mattoppenheim.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Converting kicad-nightly build to kicad stable</title><link>https://mattoppenheim.github.io/post/2022/10/converting-kicad-nightly-build-to-kicad-stable/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2022/10/converting-kicad-nightly-build-to-kicad-stable/</guid><description>Summary Kicad files are text. Using regular expressions we can convert a kicad-nightly file back to a kicad stable file. Not all features were back-converted and some manual editing needed to be done to the back-converted footprints.
Project code is at: https://github.com/mattoppenheim/convert_kicad_nightly_to_stable
Introduction I put up some KiCad reference designs for the Jacdac project here.
KiCad comes in two flavours - the stable build, which anyone sane uses and the bleeding edge with bugs and experimental new features version, called the nightly build.</description></item><item><title>Jacdac: Using the Black Magic programmer</title><link>https://mattoppenheim.github.io/post/2022/10/jacdac-using-the-black-magic-programmer/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2022/10/jacdac-using-the-black-magic-programmer/</guid><description>Summary Using my home-made Black Magic Probe, I have to push the reset button at the start of each programming cycle, then release the button once I get a correct voltage statement, to get firmware to reliably load onto my Jacdac boards
Introduction How do we program our Jacdac boards? One solution is to use a home-made Black Magic Probe (BMP) debugger. Instructions on how to make your own from a Blue pill board are here: https://github.</description></item><item><title>Using micro:bits to send data to and from an Arduino wirelessly</title><link>https://mattoppenheim.github.io/post/2022/05/using-microbits-to-send-data-to-and-from-an-arduino-wirelessly/</link><pubDate>Tue, 10 May 2022 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2022/05/using-microbits-to-send-data-to-and-from-an-arduino-wirelessly/</guid><description>Summary We can use microbits to act as a wireless bridge between an Arduino Uno and a PC. One micro:bit connects to the Arduino. The second connects to the PC. Data can be passed to and from the Arduino serial port through the micro:bits.
The problem A friend has an Arduino based instrument that he wants to communicate with from his PC wirelessly. Why? I don&amp;rsquo;t ask why. He&amp;rsquo;s bigger than I am.</description></item><item><title>Logic level converter between an Arduino Uno and micro:bit using a FET transistor</title><link>https://mattoppenheim.github.io/post/2022/05/logic-level-converter-between-an-arduino-and-microbit-using-a-fet-transistor/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2022/05/logic-level-converter-between-an-arduino-and-microbit-using-a-fet-transistor/</guid><description>Summary We can use a single FET transistor with two resistors to make a two way logic level converter to interface e.g. Arduino Uno and a micro:bit.
The problem I need to interface a micro:bit to an Arduino Uno, connecting the RX and TX pins of the Arduino to tabs on the edge connector of the micro:bit. The Arduino Uno has 5V logic levels. The micro:bit has 3V logic levels. The 5V signals from the Arduino Uno may damage the micro:bit.</description></item><item><title>Downloading YouTube videos using Termux and youtube-dl on Android</title><link>https://mattoppenheim.github.io/post/2022/04/downloading-youtube-videos-using-termux-and-youtube-dl-on-android/</link><pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2022/04/downloading-youtube-videos-using-termux-and-youtube-dl-on-android/</guid><description>Problem How to download YouTube videos from my Android phone to watch offline.
A solution Use the youtube-dl command line utility from the Termux app.
Background I work on ships where watching YouTube videos is difficult. So I want to save videos to watch offline on my Android phone. The Android apps I&amp;rsquo;d used to do this stopped being able to download YouTube videos. I use youtube-dl from my Linux laptop to download from YouTube.</description></item><item><title>Kicad - fixing invisible gaps in board outlines on the Edge.Cuts layer</title><link>https://mattoppenheim.github.io/post/2022/04/kicad-fixing-invisible-gaps-in-board-outlines-on-the-edge-cuts-layer/</link><pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2022/04/kicad-fixing-invisible-gaps-in-board-outlines-on-the-edge-cuts-layer/</guid><description>Summary Kicad appears to tell us that we have gaps in our board outlines when there aren&amp;rsquo;t any. This can be solved by opening up the segments of the board edge slightly at the error points and bridging the gaps with short lines.
The problem Kicad printed circuit board (PCB) designer tells you that you have a board edge that is incomplete when you run the design rules check (DRC). You can clearly see that you have a lovely, complete outline with no gaps in it.</description></item><item><title>Installing kicad nightly-build on Debian 11</title><link>https://mattoppenheim.github.io/post/2022/04/installing-kicad-nightly-build-on-debian-11/</link><pubDate>Fri, 08 Apr 2022 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2022/04/installing-kicad-nightly-build-on-debian-11/</guid><description>The problem I needed the latest nightly build version of the Kicad PCB design software to open some design files sent to me. I run Debian 11.
How to install kicad nightly-build on Debian I got started with the information on this site
Create a .list file in the folder /etc/apt/sources.list.d. e.g. /etc/apt/sources.list.d/kicad-nightly.list.
Contents:
deb [arch=amd64] https://debian.sur5r.net/kicad-nightly bullseye main
If you are not running Debian bullseye, change the &amp;lsquo;bullseye&amp;rsquo; to whichever version of Debian that you are running.</description></item><item><title>Remove spikes from a dataset using python</title><link>https://mattoppenheim.github.io/post/2022/02/remove-spikes-from-a-dataset-using-python/</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2022/02/remove-spikes-from-a-dataset-using-python/</guid><description>Problem How to remove random spikes from data.
Summary Using the pandas library in python we can remove random spikes from data. For this blog, I create a sine wave with random spikes then show the steps used to remove the spikes.
This blog is based on an answer I posted to a Stackoverflow question at:
https://stackoverflow.com/questions/37556487/remove-spikes-from-signal-in-python
A solution Here&amp;rsquo;s a general method for removing spikes from data. The code is at the end of this post.</description></item><item><title>Bendlabs single-axis bend sensor</title><link>https://mattoppenheim.github.io/post/2021/12/bendlabs-single-axis-bend-sensor/</link><pubDate>Thu, 30 Dec 2021 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2021/12/bendlabs-single-axis-bend-sensor/</guid><description>Using the Bendlabs 1-axis bend sensor with an ESP32 board This post explores using a more tactile and sensitive type of flex sensor than I&amp;rsquo;ve used so far. This is part of my ongoing flex sensor assistive technology project.
The flex-sensor is the bendlabs 1-axis flex sensor.
In this post I show how I interfaced this sensor with an Unexpected Maker feather S2 board and started logging data from it. This board uses the ESP32 S2 MCU.</description></item><item><title>Mounting an Android phone on Debian Linux to synchronise files</title><link>https://mattoppenheim.github.io/post/2021/12/mounting-an-android-phone-on-debian-linux-to-synchronise-files/</link><pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2021/12/mounting-an-android-phone-on-debian-linux-to-synchronise-files/</guid><description>In this post I show how to mount the internal storage of an Android phone so that folders can be updated using e.g. FreeFileSync.
An Android phone can be automagically mounted using a file explorer such as Nautilus to copy and paste files. However I cannot use FreeFileSync to synchronise files to a folder on the phone.
This blog post explains a method that worked for me in December 2021 to solve this issue.</description></item><item><title>Getting the unexpected makers esp32 s2 board to program from the Arduino IDE or CLI</title><link>https://mattoppenheim.github.io/post/2021/12/getting-the-unexpected-makers-esp32-s2-board-to-program/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2021/12/getting-the-unexpected-makers-esp32-s2-board-to-program/</guid><description>Summary Press the buttton marked &amp;lsquo;BOOT&amp;rsquo; on the board while the board flashes.
Or:
Jumper GPIO0 to GND. After flashing, remove the jumper and press the RST button on the board.
Problem Tyring to flash code to my shiney new Unexpected Makers feather esp32 s2 board I repeatedly get this error code:
serial.serialutil.SerialTimeoutException: Write timeout
This is thrown by the script esptool.py which is used to flash the target board.</description></item><item><title>Using the micro:bit to detect electrical current</title><link>https://mattoppenheim.github.io/post/2021/07/using-the-microbit-to-detect-electrical-current/</link><pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2021/07/using-the-microbit-to-detect-electrical-current/</guid><description>This blog is an ongoing record of using the micro:bit to detect electrical current.
Idea The micro:bit has a magnetometer on the board. When a current flows through a wire, a magnetic field is produced. We can use the magnetometer to detect this.
This is part of an energy conservation project for classroom use.
Summary The magnetometer on the micro:bit is used to detect the change in magnetic field produced in the mains cable to a hair dryer when it is turned on and off.</description></item><item><title>micro:bit edge connector expansion board retainer clip</title><link>https://mattoppenheim.github.io/post/2021/07/microbit-edge-connector-pcb-retainer-clip/</link><pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2021/07/microbit-edge-connector-pcb-retainer-clip/</guid><description>The problem I use PCB expansion boards to plug my micro:bit into for a recent project. The micro:bit has connection pins printed along the edge of the board. This is called an &amp;rsquo;edge connector&amp;rsquo;. Have a look here if you are not familiar with the micro:bit board. This edge connector plugs into an edge connector socket on the expansion board. The two components can be easily separated.
As I give the finished devices to other people to use, I need a way to stop the micro:bit from being easily removed from the expansion board.</description></item><item><title>flex</title><link>https://mattoppenheim.github.io/page/2021/06/flex/</link><pubDate>Tue, 29 Jun 2021 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2021/06/flex/</guid><description>Using a flex sensor as assistive technology This page contains links and information for a flex sensor based assistive technology device that I am developing.
Summary This project (Flex) is designed to fill a gap in what is currently available with off the shelf assistive technology. The system uses a short flexible plastic bend sensor. When the sensor is bent beyond an adjustable threshold, a switch signal is sent to a communication device.</description></item><item><title>making assistive technology devices</title><link>https://mattoppenheim.github.io/post/2021/06/making-assistive-technology-devices/</link><pubDate>Mon, 21 Jun 2021 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2021/06/making-assistive-technology-devices/</guid><description>Making assistive technology This post presents a few of the lessons that I have learned from building assistive technology projects over the last few years. This is so that others may avoid some of the mistakes I made. Comments are welcome.
Summary Work back from what you want the end-user&amp;rsquo;s experience to be and choose the technology accordingly.
Define what success looks like The currency of success in academic is publication.</description></item><item><title>making flex-sense</title><link>https://mattoppenheim.github.io/page/2021/05/making-the-flex-sensor/</link><pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2021/05/making-the-flex-sensor/</guid><description>Making the flex-sense assistive technology device I&amp;rsquo;ve not detailed the build history of a project before. The design decisions made along the way, the testing of different ideas and the mistakes made are not shown. This might lead to the impression that projects went smoothly from start to finish This has never been the case! I&amp;rsquo;m putting this page together as it might help somebody not make the same mistakes I make.</description></item><item><title>Cartoons about Covid-19</title><link>https://mattoppenheim.github.io/page/2021/04/cartoons-about-covid-19/</link><pubDate>Tue, 06 Apr 2021 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2021/04/cartoons-about-covid-19/</guid><description>Covid-19 may not be a laughing matter, but that shouldn&amp;rsquo;t stop a cartoonist. Please find a couple of drawings inspired by the pandemic.
[ngg src=&amp;ldquo;galleries&amp;rdquo; ids=&amp;ldquo;7&amp;rdquo; display=&amp;ldquo;basic_thumbnail&amp;rdquo; thumbnail_crop=&amp;ldquo;0&amp;rdquo;]</description></item><item><title>micro:bit v1 with yotta - removing build warnings</title><link>https://mattoppenheim.github.io/post/2021/03/microbit-v1-with-yotta-removing-build-warnings/</link><pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2021/03/microbit-v1-with-yotta-removing-build-warnings/</guid><description>problem Running yotta build with the micro:bit v1 C tools produces screenfulls of depreceation warnings, such as:
warning: dynamic exception specifications are deprecated in C++11 [-Wdeprecated]
This makes it hard to find the error messages with the reason why the build failed.
solution Tell the C++ compiler not to include depreceation warnings.
instructions Add the compiler flag -Wno-deprecated to the CMAKE_CXX_FLAGS_INIT options in the file toolchain.cmake.
File location:
&amp;lt;project&amp;gt;/yotta_targets/bbc-microbit-classic-gcc/CMake/toolchain.cmake&amp;gt;/yotta_targets/bbc-microbit-classic-gcc/CMake/toolchain.cmake Line before:</description></item><item><title>Getting started with C++ on the micro:bit v2 in Linux</title><link>https://mattoppenheim.github.io/post/2021/03/getting-started-with-c-on-the-microbit-v2-in-linux/</link><pubDate>Sat, 06 Mar 2021 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2021/03/getting-started-with-c-on-the-microbit-v2-in-linux/</guid><description>Aims This post is about getting started with programming the micro:bit v2 using C++. I use the example code from the Lancaster University GitHub for this.
We will:
Download the GitHub repository with the sample code. Build and load the default HelloWorld example to the micro:bit, which scrolls &amp;lsquo;HELLO WORLD!&amp;rsquo; on the LEDs. Modify and build one of the other examples to use one of the micro:bit pins as an analog input.</description></item><item><title>HandShake set up instructions - backup</title><link>https://mattoppenheim.github.io/page/2021/03/handshake-set-up-instructions-backup/</link><pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2021/03/handshake-set-up-instructions-backup/</guid><description>Last update: September 17th 2020
Details of the HandShake project and a video of the system in use are here: https://mattoppenheim.com/handshake/
I made some videos which complement these instructions.
How to download the code and install the system is here: https://youtu.be/FAy9pbkGqI4
How to operate the system is here: https://youtu.be/MSOVIbfd228
This site details how to set up and operate the system and complements the videos linked above. Have a look at the project page before reading these.</description></item><item><title>Setting up a micropython editor with the BBC micro:bit v2 on Linux</title><link>https://mattoppenheim.github.io/post/2021/01/setting-up-a-micropython-editor-with-the-bbc-microbit-v2-on-linux/</link><pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2021/01/setting-up-a-micropython-editor-with-the-bbc-microbit-v2-on-linux/</guid><description>This post follows on from my blog post that shows how to set up the mu-editor in Linux for v1 of the micro:bit. This blog post is here:
https://mattoppenheim.com/2021/01/05/setting-up-mu-editor-with-the-bbc-microbit-on-linux/
I couldn&amp;rsquo;t get the mu-editor to work with micro:bit v2. This was frustrating as I wanted to check some existing code ran on v2 of the micro:bit as well as start to use some of the new feautures on board.
I solved this by following a tip from a comment on my first post.</description></item><item><title>Setting up mu-editor with the BBC micro:bit v1 on Linux</title><link>https://mattoppenheim.github.io/post/2021/01/setting-up-mu-editor-with-the-bbc-microbit-on-linux/</link><pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2021/01/setting-up-mu-editor-with-the-bbc-microbit-on-linux/</guid><description>I recently set up an installation of Debian 10 and set up a tool chain for programming the BBC micro:bit with micropython. I&amp;rsquo;d forgotten some of the stumbling blocks I had the last time I did this, so am recording them here. Hopefully, this post will help you avoid them.
I use to represent the user name that I log in with.
The instructions in this blog get you set up to work with the micro:bit v1 using mu-editor.</description></item><item><title>micro:bit c toolchain explained, part 2. yotta, file locations</title><link>https://mattoppenheim.github.io/post/2020/12/microbit-c-toolchain-explained-part-2-yotta-file-locations/</link><pubDate>Tue, 29 Dec 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2020/12/microbit-c-toolchain-explained-part-2-yotta-file-locations/</guid><description>December 2020: I wrote this post when only v1 of the micro:bit existed. I haven&amp;rsquo;t yet checked to see if the contents are still valid for the toolchain used to program v2 of the micro:bit.
This article follows on from part 1 of my attempt to explain the chain of tools used to build your C code into something that can run on the BBC micro:bit. In this part, I will cover the yotta build tool and how the make build tool is used as the top level component.</description></item><item><title>Accessing Smartbox Grid 3 using Python and win32gui</title><link>https://mattoppenheim.github.io/post/2020/10/accessing-smartbox-grid-3-using-python-and-win32gui/</link><pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2020/10/accessing-smartbox-grid-3-using-python-and-win32gui/</guid><description>Summary Smartbox&amp;rsquo;s Grid 3 communication software creates two windows containing the words &amp;lsquo;Grid 3&amp;rsquo; in their titles, even though you can only see one. If you are trying to interact with this software using your own program, you need to make sure to access the window that you intend to.
Problem I wrote some Python code to detect the use of Grid 3 or Tobii&amp;rsquo;s Communicator software for this project, to visually show when somebody who uses eyegaze technology interacts with the software.</description></item><item><title>Using a microbit to control a servo motor</title><link>https://mattoppenheim.github.io/post/2020/10/using-a-microbit-to-control-a-servo-motor/</link><pubDate>Sat, 03 Oct 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2020/10/using-a-microbit-to-control-a-servo-motor/</guid><description>Subtitle: Making things move a microbit at a time
In this post I explain how I set up and operated a small servo motor that runs directly from the same 2xAAA battery pack that powers my microbit. I then explain how to operate a servo motor that requires a 5V power supply from the same microbit, using a transistor as a voltage level converter for the control signal.
Introduction I set up a small servo motor for a project to make an automated guinea pig feeder.</description></item><item><title>Getting the login screen on hotel WiFi using Linux</title><link>https://mattoppenheim.github.io/post/2020/09/getting-the-login-screen-on-hotel-wifi-using-linux/</link><pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2020/09/getting-the-login-screen-on-hotel-wifi-using-linux/</guid><description>Problem I can see that I am connected to the hotel WiFi on my laptop, but the login screen does not come up on my browser. So I cannot access the Internet.
My laptop is connected to a private IP address on the hotel network, but I cannot access the login page on a browser to get access to the world wide web
I run Debian 10, using the i3 tiling manager.</description></item><item><title>BBC micro:bit guinea pig timed feeder instructions</title><link>https://mattoppenheim.github.io/post/2020/09/bbc-microbit-activating-a-servo-motor-using-a-timer/</link><pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2020/09/bbc-microbit-activating-a-servo-motor-using-a-timer/</guid><description>This blog post is the instructions on how to use a timed servo motor circuit that I lashed up as part of a guinea pig feeder for a friend.
The hardware details can be found here: here
Software is on my GitHub site here
The need A friend wanted something to open a box of food to feed his guinea pigs. The box needs to open after an adjustable time.</description></item><item><title>BBC micro:bit wrist holders</title><link>https://mattoppenheim.github.io/post/2020/09/bbc-microbit-wrist-holders/</link><pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2020/09/bbc-microbit-wrist-holders/</guid><description>With my handshake project, a microbit and AAA battery pack need to be worn on the wrist. They can be vigorously shaken. I don&amp;rsquo;t want the equipment flying off! So what can I use that will hold the microbit and batteries safely in place and is comfortable and safe to wear?
I tried a couple of armband holders aimed at iPods recently. Both of them are suitable for housing a BBC microbit and a AAA battery pack.</description></item><item><title>Automating loading micropython code to the BBC micro:bit in Linux</title><link>https://mattoppenheim.github.io/post/2020/08/automating-loading-micropython-code-to-the-bbc-microbit-in-linux/</link><pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2020/08/automating-loading-micropython-code-to-the-bbc-microbit-in-linux/</guid><description>Introduction When I edit micropython for a microbit project, I want the code to automagically load onto the microbit each time that I save the code. Then I want to see any messages from the microbit displayed. I worked out a toolchain that does this under Linux.
I summarise the toolchain in the next section, then go through each step in more detail.
For the examples in this post, I am editing a file called &amp;lsquo;feeder.</description></item><item><title>Powering the BBC micro:bit with a 5V power bank</title><link>https://mattoppenheim.github.io/post/2020/08/powering-the-bbc-microbit-with-a-5v-power-bank/</link><pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2020/08/powering-the-bbc-microbit-with-a-5v-power-bank/</guid><description>I had an interesting question to a blog post I made about running a DC motor from a microbit. The blog post is here. I am pleased that anybody reads my blogs.
Doesn&amp;rsquo;t applying 5V to the microbit board exceed the voltage spec?
When we connect the board to our laptops or PCs, we apply 5V to the board through the USB connector. Sometimes I run the board from a USB power bank.</description></item><item><title>Configuring a Python virtualenv in Debian</title><link>https://mattoppenheim.github.io/post/2020/08/configuring-a-python-virtualenv-in-debian/</link><pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2020/08/configuring-a-python-virtualenv-in-debian/</guid><description>Python virtual environments are a good idea. Naturally, I had a few problems getting mine to work properly. I found that my globally installed libraries were visible the activated venv. The whole point of a venv is to isolate libraries. The globally installed libraries that are not also explicitly installed in the venv should not be usable.
I use Debian and the bash shell.
So how did I fix what I found is a common problem?</description></item><item><title>Running handShake in administrator mode to operate Grid 3</title><link>https://mattoppenheim.github.io/post/2020/08/running-handshake-in-administrator-mode-to-operate-grid-3/</link><pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2020/08/running-handshake-in-administrator-mode-to-operate-grid-3/</guid><description>Sensory Software&amp;rsquo;s Grid 3 is a popular communication software package, running in Windows. Naturally, I would like handShake to be able to operate this software through the software keystrokes that handShake generates. To get Grid 3 to respond to a software keystroke, I have to &amp;rsquo;elevate&amp;rsquo; the base.py script which runs on the communication device to run as an Administrator.
There is a second solution. I can use a Freetronics Leostick USB dongle as a pretend keyboard and have this generate keystrokes that appear as coming from a physical keyboard.</description></item><item><title>Give Me a Minute idea in use in commercial AAC software</title><link>https://mattoppenheim.github.io/post/2020/07/give-me-a-minute-idea-in-use-in-commercial-aac-software/</link><pubDate>Sat, 04 Jul 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2020/07/give-me-a-minute-idea-in-use-in-commercial-aac-software/</guid><description>To understand this post, please read the first couple of paragraphs of my give-me-a-minute project page.
The idea presented in give-me-a-minute looks to be making it into commerical AAC products. I don&amp;rsquo;t pretend that my project influenced this development. Be nice to think it did though&amp;hellip; I&amp;rsquo;ll come back to reality now.
One implementation is as &amp;lsquo;partner windows&amp;rsquo; where the text being composed on an AAC display is mirrored to a second screen that faces away from the person composing the test.</description></item><item><title>HandShake set up instructions</title><link>https://mattoppenheim.github.io/page/2020/04/handshake-set-up-instructions/</link><pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2020/04/handshake-set-up-instructions/</guid><description>All the instructions are on my GitHub page at:
https://mattoppenheim.github.io/microbit_hand_shake/
I used mkdocs to create the site. This means that all the text and supporting images can be downloaded from the GitHub site, should anybody want them.</description></item><item><title>Connecting the BBC micro:bit to Windows and adding code to it</title><link>https://mattoppenheim.github.io/post/2020/04/connecting-the-bbc-microbit-to-windows-and-adding-code-to-it/</link><pubDate>Mon, 27 Apr 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2020/04/connecting-the-bbc-microbit-to-windows-and-adding-code-to-it/</guid><description>This page details how to connect the BBC micro:bit to Windows then install a pre-written program to it. This guide was written to support some of my &amp;lsquo;how-to&amp;rsquo; guides for assistive technology devices I made using the BBC micro:bit.
Author: Matthew Oppenheim
email: matt.oppenheim@gmail.com
GitHub site: https://github.com/mattoppenheim
Summary Connect the microbit using a micro USB cable from the microbit to the Windows device. You do not need a battery pack for the microbit.</description></item><item><title>3D printing face shields on a Creality CR10-Mini</title><link>https://mattoppenheim.github.io/post/2020/04/3d-printing-face-shields-on-a-cr10-mini/</link><pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2020/04/3d-printing-face-shields-on-a-cr10-mini/</guid><description>Like a lot of folk right now (mid Covid-19 lockdown), I&amp;rsquo;m using a 3D printer to produce face shields. I started from scratch and with little experience of using a 3D printer. This post will detail some of the issues I had and my solutions, in the off chance that this information could help somebody else.
Please see my HSE manager testing one of the completed face shields in the picture below so you know what I am talking about.</description></item><item><title>micro:bit C toolchain explained, part 1. ninja &amp; cmake.</title><link>https://mattoppenheim.github.io/post/2020/03/microbit-c-toolchain-make-ninja-cmake-explained/</link><pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2020/03/microbit-c-toolchain-make-ninja-cmake-explained/</guid><description>December 2020: I wrote this post when only v1 of the micro:bit existed. I haven&amp;rsquo;t yet checked to see if the contents are still valid for the toolchain used to program v2 of the micro:bit.
I use the offline build tools from Lancaster University for compiling and building C-code for the BBC Micro:bit board. I used the toolset without really understanding what was going on under the hood. I spent some happy time fixing this.</description></item><item><title>Using Vim to change character hexadecimal values beyond standard ASCII values</title><link>https://mattoppenheim.github.io/post/2020/01/using-vim-to-change-character-hexadecimal-values-beyond-standard-ascii-values/</link><pubDate>Thu, 30 Jan 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2020/01/using-vim-to-change-character-hexadecimal-values-beyond-standard-ascii-values/</guid><description>I needed to insert the character with hexadecimal value 0xFF into a text file. Problem was, every time I did this using vim and xxd, it didn&amp;rsquo;t &amp;lsquo;stick&amp;rsquo;. Turned out I needed to open the file for editing using the &amp;lsquo;-b&amp;rsquo; flag:
vim -b
Longer story and example.
vim test.txt
Text in the file:
123
Press and type the following to see the hexadecimal values:
:%!xxd
This is what you will see, the line number on the left, the hexadecimal values of each character (two numbers per character) and on the right the text.</description></item><item><title>Communication Matters Conference 2019</title><link>https://mattoppenheim.github.io/post/2019/09/communication-matters-conference-2019/</link><pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2019/09/communication-matters-conference-2019/</guid><description>I attended the 2019 Communication Matters Conference in Leeds on Monday. I presented a poster on three of my assistive technology projects using the BBC micro:bit and gave a &amp;rsquo;lightning talk&amp;rsquo; - 15 slides, auto advancing every 25 seconds. I wrote the PowerPoint presentation using Libreoffice on my Linux distro. Just before giving the talk I realised I had not tested it in Windows, which the conference PC was running with.</description></item><item><title>Voltage controlled current source</title><link>https://mattoppenheim.github.io/post/2019/07/voltage-controlled-current-source/</link><pubDate>Fri, 05 Jul 2019 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2019/07/voltage-controlled-current-source/</guid><description>Design I needed a voltage controlled current source (VCCS) to test some current limiting devices. A friend who knows far more than I about analog electronics recommended using a power op-amp, which is an op-amp capable of outputting a high current. I didn&amp;rsquo;t have one of these to hand, so used a regular low power op-amp to drive the gate of an N-type MOSFET. I think that a power op-amp is just a regular op-amp with some meaty FETs inside and a package capable of disappating more heat than a regular puny op-amp.</description></item><item><title>Using a flex sensor as assistive technology</title><link>https://mattoppenheim.github.io/page/2019/06/hand-wave/</link><pubDate>Tue, 25 Jun 2019 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2019/06/hand-wave/</guid><description>GitHub site: https://github.com/mattoppenheim/microbit_flex
Problem How can we use a small sideways hand motion or a small finger movement to act as a switch for switchable software using off the shelf hardware?
Solution We can use an off the shelf flex sensor connected to a BBC micro:bit which has been configured to act as a switch to control switchable software. For an explanation of what switchable software is and how we can use a BBC microbit to act as a switch to interact with it, please see my blog post here.</description></item><item><title>Using the microbit to control switch access software</title><link>https://mattoppenheim.github.io/post/2019/06/using-the-microbit-to-control-switch-access-software/</link><pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2019/06/using-the-microbit-to-control-switch-access-software/</guid><description>What is switch access software Many disabled people use specialist software to create speech or to interact with the environment (e.g. turn on lights). Some are unable to use keyboards or mice to operate this software, so use a variety of &amp;lsquo;switches&amp;rsquo;, such as push buttons. These buttons act like keys on a keyboard, or pretend to be a mouse click.
I took some hand held video of a switchable software package which enables speech to be created.</description></item><item><title>Checking the resonant frequency of a piezoelectric crystal</title><link>https://mattoppenheim.github.io/post/2019/05/checking-the-resonant-frequency-of-a-piezoelectric-crystal/</link><pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2019/05/checking-the-resonant-frequency-of-a-piezoelectric-crystal/</guid><description>Having failed to get a tactile response from a small piezoelectric crystal, I wanted to check that I was hitting it with the correct driving frequency. This is the frequency that makes the crystal resonate. I found a test circuit and method on this website. The schematic for the testing circuit shown below is copied from that website.
Piezoelectric circuit resonance frequency testing circuit from https://www.americanpiezo.com/knowledge-center/piezo-theory/determining-resonance-frequency.html
I breadboarded the circuit and used my Digilent Analog Discovery 2 as a network analyser to check on the resonant frequency.</description></item><item><title>Switching a 5V DC motor with a microbit.</title><link>https://mattoppenheim.github.io/post/2019/03/switching-a-5v-dc-motor-with-a-microbit/</link><pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2019/03/switching-a-5v-dc-motor-with-a-microbit/</guid><description>This post shows how to use a BBC microbit to control a 5V fan or DC motor using a FET switch. The circuit shows how we can use a transistor to control a device that needs more current than the microbit can supply.
This project uses a 5V voltage from a USB power bank.
Only connect 5V to the USB connector on the microbit - not the battery connector or the edge connector.</description></item><item><title>Wordpress - displaying code without line breaks or paragraph tags</title><link>https://mattoppenheim.github.io/post/2019/03/wordpress-displaying-code-without-or-tags/</link><pubDate>Thu, 07 Mar 2019 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2019/03/wordpress-displaying-code-without-or-tags/</guid><description>Since updating Wordpress to v5.1, and symbols started appearing in my code snippets in Wordpress. I was pasting Python code into the editor. The solution I found was to:
Install the Syntax Highlighter plugin.
Go to the Code Editor. Surround your code with these tags:
You can select a Syntax Highlighter block in the Visual Editor under the &amp;lsquo;format&amp;rsquo; tab. I found that selecting a language from the syntax highlighter menu in the Visual Editor corrupted my code, converting &amp;lt; or &amp;gt; symbols to &amp;amp;lt or &amp;amp;gt and various other shenanigans.</description></item><item><title>Measuring the BBC micro:bit LED current draw</title><link>https://mattoppenheim.github.io/post/2019/03/measuring-the-bbc-microbit-led-current-draw/</link><pubDate>Wed, 06 Mar 2019 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2019/03/measuring-the-bbc-microbit-led-current-draw/</guid><description>Summary: I looked at the voltage and current supplied to the BBC micro:bit for different numbers of active LEDs. The voltage to the LEDs is pulsed at about 55Hz, with each LED on about 1/3 of the time at maximum intensity. The frequency is high enough that the LED appears continuously lit. The current draw from a single pin is in spec for the microcontroller. The current supplied to each LED decreases as the total number of LEDs being sourced from the same microcontroller pin increases.</description></item><item><title>pytest and relative imports part 2</title><link>https://mattoppenheim.github.io/post/2019/01/pytest-and-relative-imports-part-2/</link><pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2019/01/pytest-and-relative-imports-part-2/</guid><description>I had another tussle with getting pytest to recognise where the modules to be tested are relative to the directory where the testing code is. I use the eclipse IDE for coding. This time I resolved the issue using relative imports. Last time I tried adding the directory where testing code is to the system path. This is detailed in my post here.
This time I realised that I could solve the issue using relative imports correctly.</description></item><item><title>Give Me a Minute set up and use instructions</title><link>https://mattoppenheim.github.io/page/2019/01/give-me-a-minute-set-up-and-use-instructions/</link><pubDate>Tue, 15 Jan 2019 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2019/01/give-me-a-minute-set-up-and-use-instructions/</guid><description>All the instructions are on my GitHub page at:
https://mattoppenheim.github.io/microbit_activity_indicator/
I used mkdocs to create the site. This means that all the text and supporting images can be downloaded from the GitHub site, should anybody want them.</description></item><item><title>200V piezo crystal driver</title><link>https://mattoppenheim.github.io/page/2019/01/200v-piezo-crystal-driver/</link><pubDate>Fri, 04 Jan 2019 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2019/01/200v-piezo-crystal-driver/</guid><description>Spoiler alert: I got the driving circuitry to behave as planned, but I could not feel the crystal vibrate.
The idea is to use the tiny crystals used in piezoelectric motors to create an array of dots that can be made to vibrate under the area of a finger tip. This will be used to create a tactile display that can be felt. The initial aim would be an array of these crystals under an area the size of your fingertip.</description></item><item><title>200V piezo crystal driver</title><link>https://mattoppenheim.github.io/post/2018/12/200v-piezo-crystal-driver/</link><pubDate>Mon, 31 Dec 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2018/12/200v-piezo-crystal-driver/</guid><description>Spoiler alert: I got the driving circuitry to behave as planned, but I could not feel the crystal vibrate.
The idea is to use the tiny crystals used in piezoelectric motors to create an array of dots that can be made to vibrate under the area of a finger tip. This will be used to create a tactile display that can be felt. The initial aim would be an array of these crystals under an area the size of your fingertip.</description></item><item><title>Christmas Cards</title><link>https://mattoppenheim.github.io/page/2018/12/christmas-cards/</link><pubDate>Thu, 20 Dec 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2018/12/christmas-cards/</guid><description>2021 Christmas card This year&amp;rsquo;s environmentally friendly, low-emission and carbon negative Christmas card.
Links to two print-it-yourself pdf files are below, one for a single-fold card and one for a two-fold card:
christmas_2021_1_fold
christmas_2021_2_fold
previous Christmas cards Christmas cards for 2020. Hopefully only relevant this year.
December 2019, Santa visits every house in the World.
February 2020, pandemic.
Coincidence &amp;hellip;.
Links to two print-it-yourself pdf files are below, one for a single fold card, one for a two-fold card:</description></item><item><title>Lancaster</title><link>https://mattoppenheim.github.io/page/2018/11/lancaster-cartoons/</link><pubDate>Fri, 02 Nov 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2018/11/lancaster-cartoons/</guid><description>If you are from Lancaster, you might recognise the cartoon below.
[gallery order=&amp;ldquo;DESC&amp;rdquo; ids=&amp;ldquo;787&amp;rdquo;]</description></item><item><title>Using the DRV8662 chip to create 105V DC from battery voltage.</title><link>https://mattoppenheim.github.io/post/2018/10/using-the-drv8662-chip-to-get-105v-from-battery-voltage/</link><pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2018/10/using-the-drv8662-chip-to-get-105v-from-battery-voltage/</guid><description>This is how I generated a little over 100V of DC using a 3.95 V power supply with about $10 of parts.
Summary:
Using a DRV8662 chip we can create a battery powered board that will generate a 105V DC power rail using around $10 worth of parts. Some surface mount soldering is needed though. If you have an input signal below about 500Hz, you can use the chip to amplify this to have a peak to peak output of up to around 200V.</description></item><item><title>Give me a minute - indicating when eye tracker software is in use</title><link>https://mattoppenheim.github.io/page/2018/07/give-me-a-minute/</link><pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2018/07/give-me-a-minute/</guid><description>The need It can be difficult to tell when somebody who uses an eye tracker to operate their communications software is communicating. So the temptation is to look over their shoulder. This would annoy me! Fil McIntyre, The Head Technologist at Beaumont College asked if it is possible to create an indicator for when the communications software is in use. This enables a more natural two way conversation. You talk to the AT user and when you see the light flashing, you know that a reply is being prepared.</description></item><item><title>Real time accelerometer display from three BBC Micro:bits</title><link>https://mattoppenheim.github.io/post/2018/07/real-time-accelerometer-display-from-three-bbc-microbits/</link><pubDate>Tue, 17 Jul 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2018/07/real-time-accelerometer-display-from-three-bbc-microbits/</guid><description>How to plot real-time sensor data from three BBC micro:bits.
Please find a video showing this in action below. On the screen to the right of the juggling clown, you can see the accelerometer data. Each BBC micro:bit has a three-axis accelerometer in it. I get the averaged acceleration value from all three axes from each micro:bit. On the screen, three are three traces, one for each micro:bit. As the boards are juggled, the accelerometer values are sent by radio to a receiver micro:bit connected to the computer.</description></item><item><title>Sharing wifi with a raspberry pi zero w using create_ap</title><link>https://mattoppenheim.github.io/post/2018/07/sharing-wifi-with-a-raspberry-pi-zero-w-using-create_ap/</link><pubDate>Sun, 08 Jul 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2018/07/sharing-wifi-with-a-raspberry-pi-zero-w-using-create_ap/</guid><description>I had a bit of a chicken and egg situation while connecting a raspberry pi zero w to wifi. I work on a ship for six weeks at a time, so my choice of wifi is limited to the cabin network on the ship. This has a two part authentication. First, a password is used to connect to the wifi. Then a user ID and a different password is entered into a login page on a browser.</description></item><item><title>Using tkinter and python to continuously display the output from a system command</title><link>https://mattoppenheim.github.io/post/2018/06/using-tkinter-and-python-to-continuously-display-the-output-from-a-system-command/</link><pubDate>Sun, 24 Jun 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2018/06/using-tkinter-and-python-to-continuously-display-the-output-from-a-system-command/</guid><description>I put an answer to a stackoverflow question. The poster wanted to display the output from a &amp;rsquo;netstat&amp;rsquo; command every second. I suggested using a tkinter screen. To run the nestat command every second, the command line entry would be &amp;rsquo;netstat 1&amp;rsquo;. This is fed to a subprocess. This subprocess is wrapped in a thread to avoid blocking the main thread. The main thread needs to be left to deal with the tkinter display.</description></item><item><title>Using udev to remove the need for sudo with the BBC Micro:bit</title><link>https://mattoppenheim.github.io/post/2018/06/using-udev-to-remove-the-need-for-sudo-with-the-bbc-microbit/</link><pubDate>Sun, 24 Jun 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2018/06/using-udev-to-remove-the-need-for-sudo-with-the-bbc-microbit/</guid><description>A comment on this post hinted that there is a way to remove the need to use &amp;lsquo;sudo&amp;rsquo; when interacting with the BBC Micro:bit on Linux. So I left a comment asking how to do this, which the author kindly answered:
The way to make sure there is no need for root permissions to access USB device (like a connected micro:bit) is by creating a file in the `/etc/udev/rules.d/` directory with proper config.</description></item><item><title>ssh to a pi zero w from a linux box</title><link>https://mattoppenheim.github.io/post/2018/06/ssh-to-a-pi-zero-w-from-a-linux-box/</link><pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2018/06/ssh-to-a-pi-zero-w-from-a-linux-box/</guid><description>There are many sites and YouTube videos explaining how to connect the pi zero to a laptop or desktop using a USB cable, then access the pi zero from the laptop using ssh. Here is a link to one guide.
I followed a guide on YouTube but had a few problems connecting to the pi zero w using ssh through Linux. Each time I put in: [code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] ssh pi@raspberrypi.</description></item><item><title>Zombie BBC Micro:bit serial ports created when using pyocd-gdbserver --persist</title><link>https://mattoppenheim.github.io/post/2018/05/multiple-bbc-microbit-serial-ports-when-using-pyocd-gdbserver/</link><pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2018/05/multiple-bbc-microbit-serial-ports-when-using-pyocd-gdbserver/</guid><description>So I was happily using pyocd-gdbserver to program and enter debugging mode on a BBC Micro:bit attached to one of my laptop&amp;rsquo;s USB port, as described here. Then I stopped being able to read data through the USB port&amp;hellip; Long story short, multiple &amp;lsquo;zombie&amp;rsquo; ports were created and my Python script was connecting to a zombie instead of the live one.
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] setserial -g /dev/ttyACM* [/code]
output:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] /dev/ttyACM0, UART: unknown, Port: 0x0000, IRQ: 0, Flags: low_latency /dev/ttyACM1, UART: unknown, Port: 0x0000, IRQ: 0, Flags: low_latency [/code]</description></item><item><title>Safety Sins</title><link>https://mattoppenheim.github.io/page/2018/05/safety-sins/</link><pubDate>Tue, 22 May 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2018/05/safety-sins/</guid><description>Safety signs worth looking at Safety signs that make you laugh! After almost 20 years in the offshore oil industry, I was suffering from a case of &amp;lsquo;Sign-blindness&amp;rsquo;. This happens when we are overwhelmed with so many generic safety signs that we end up ignoring all of them. I had a go at drawing a few of my own signs, starring some of the people that I work with. My colleagues pretend to like them.</description></item><item><title>Sublime Text 3, adding a custom python 3 build</title><link>https://mattoppenheim.github.io/post/2018/05/sublime-text-3-adding-a-custom-python-3-build/</link><pubDate>Tue, 22 May 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2018/05/sublime-text-3-adding-a-custom-python-3-build/</guid><description>Typing &amp;lsquo;python&amp;rsquo; at the command line of my Linux Mint 18 install gives me a python 2.7 prompt. So when I run a python script in Sublime Text, it was built using Python 2.7. But I want to use python 3! So I entered a custom python 3 build.
I use Linux Mint 18. The &amp;ldquo;shell_cmd&amp;rdquo; mentioned below will be different for Windows and maybe for Mac OS as well.</description></item><item><title>Python 3, threading and references</title><link>https://mattoppenheim.github.io/post/2018/05/python-3-threading-and-references/</link><pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2018/05/python-3-threading-and-references/</guid><description>Creating a thread I used threading to enable real-time graphing of data from sensors. One thread collected data from the sensors. The main thread ran the real time graph. I had a few problems getting started. It came down to my incorrect use of brackets when creating the thread.
When we create a thread using the threading library, we need to pass the target to the thread without using brackets. e.</description></item><item><title>Installing the Eclipse Embedded Systems Register View plugin</title><link>https://mattoppenheim.github.io/post/2018/05/installing-the-eclipse-embedded-systems-register-view-plugin/</link><pubDate>Mon, 07 May 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2018/05/installing-the-eclipse-embedded-systems-register-view-plugin/</guid><description>I had some &amp;lsquo;issues&amp;rsquo; getting the Eclipse Embedded Systems Register View plugin to install in Eclipse Oxygen under Linux Mint 18. When I tried to install the plugin from the Eclipse Marketplace, I repeatedly got an error:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] Artifact not found&amp;hellip; [/code]
Thanks to a Sourceforge issue post here I got the plugin installed. A solution to the problem is towards the bottom of this post. However, I needed to modify the solution slightly.</description></item><item><title>Eclipse, yotta, C/C++ and the BBC Micro:bit</title><link>https://mattoppenheim.github.io/post/2018/05/eclipse-yotta-c-c-and-the-bbc-microbit/</link><pubDate>Fri, 04 May 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2018/05/eclipse-yotta-c-c-and-the-bbc-microbit/</guid><description>With the help of the excellent instructions at the link below I set up Eclipse with yotta to compile C code for the BBC micro:bit under Linux: http://flames-of-code.netlify.com/blog/microbit-cpp-3/ I get the debugger window to come up, but have not yet used this feature in anger. The writer, achary, clearly knows more about Eclipse and embedded programming than I do. I got a little stuck at a couple of stages so created this page to pass on my solutions.</description></item><item><title>Relative imports in Jupyter notebooks</title><link>https://mattoppenheim.github.io/post/2018/03/relative-imports-in-jupyter-notebooks/</link><pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2018/03/relative-imports-in-jupyter-notebooks/</guid><description>How do we import a module from a .py or a .ipynb file into a Jupyter notebook from a different directory?
I wrote this post after answering a question on stackoverflow:
https://stackoverflow.com/questions/49282122/import-modules-in-jupyter-notebook-path/
For example, if we have the directory structure:
analysis.ipynb
/src/configuration.py
/src/configuration_nb.ipynb
How do we access the file configuration.py or the notebook configuration_nb.ipynb in the notebook analysis.ipynb?
The nbimporter module helps us here:
pip install nbimporter
contents of /src/configuration.py:</description></item><item><title>Using Python to detect activity in Sensory Software's Grid 2</title><link>https://mattoppenheim.github.io/post/2018/03/using-python-to-detect-activity-in-sensory-softwares-grid-2/</link><pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2018/03/using-python-to-detect-activity-in-sensory-softwares-grid-2/</guid><description>Update: March 2018. This work is being submitted to the Communications Matters conference.
Following on from the eyeBlink post, with the help of Fil at Beaumont, I modified the algorithm I&amp;rsquo;m using to detect when the Grid 2 or Grid 3 software is being used. The image below shows Sensory Software&amp;rsquo;s Grid 2 software being used to construct a sentence. The new text appears in the white area at the top of the window.</description></item><item><title>Seismic survey cartoons</title><link>https://mattoppenheim.github.io/page/2018/02/seismic-survey-cartoon/</link><pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2018/02/seismic-survey-cartoon/</guid><description>Here&amp;rsquo;s a gallery of cartoons inspired by more years than I can remember of working in the seismic survey industry. [ngg_images source=&amp;ldquo;galleries&amp;rdquo; container_ids=&amp;ldquo;4&amp;rdquo; display_type=&amp;ldquo;photocrati-nextgen_basic_thumbnails&amp;rdquo; override_thumbnail_settings=&amp;ldquo;0&amp;rdquo; thumbnail_width=&amp;ldquo;240&amp;rdquo; thumbnail_height=&amp;ldquo;160&amp;rdquo; thumbnail_crop=&amp;ldquo;1&amp;rdquo; images_per_page=&amp;ldquo;20&amp;rdquo; number_of_columns=&amp;ldquo;0&amp;rdquo; ajax_pagination=&amp;ldquo;0&amp;rdquo; show_all_in_lightbox=&amp;ldquo;0&amp;rdquo; use_imagebrowser_effect=&amp;ldquo;0&amp;rdquo; show_slideshow_link=&amp;ldquo;1&amp;rdquo; slideshow_link_text=&amp;quot;[Show slideshow]&amp;quot; order_by=&amp;ldquo;sortorder&amp;rdquo; order_direction=&amp;ldquo;ASC&amp;rdquo; returns=&amp;ldquo;included&amp;rdquo; maximum_entity_count=&amp;ldquo;500&amp;rdquo;]</description></item><item><title>HeadBanger - controlling software with head motion</title><link>https://mattoppenheim.github.io/page/2018/02/headbanger-controlling-software-with-head-motion/</link><pubDate>Thu, 22 Feb 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2018/02/headbanger-controlling-software-with-head-motion/</guid><description>How can we enable somebody to control software with their head? Traditionally we would set up physical buttons or attach sensors to a helmet. Both of these solutions have their issues, so I was asked if it would be possible to set up a &amp;lsquo;virtual&amp;rsquo; system.
The aim is to make controllers to allows the students at Beaumont College to operate their Grid software or to activate one of the many network enabled devices they have - such as lamps using head gesture.</description></item><item><title>BBC micro:bit wrist holder</title><link>https://mattoppenheim.github.io/page/2018/02/bbc-microbit-wrist-holder/</link><pubDate>Tue, 20 Feb 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2018/02/bbc-microbit-wrist-holder/</guid><description>I made several wrist holders for the microbit and a AAA battery pack as I could not find a suitable off the shelf solution.
Since I made my own - instructions below, I found a couple of ready-made solutions that I write about in this blog:
BBC micro:bit wrist holders
Make your own microbit wrist holder This section shows you how to convert a £3 iPod 7 armband into a wrist or arm holder for a BBC micro:bit board and battery.</description></item><item><title>Caricatures</title><link>https://mattoppenheim.github.io/page/2018/02/caricatures/</link><pubDate>Tue, 20 Feb 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2018/02/caricatures/</guid><description>A few caricatures I drew of people who have the misfortune to work with or know me.</description></item><item><title>HandShake</title><link>https://mattoppenheim.github.io/page/2018/02/handshake/</link><pubDate>Thu, 15 Feb 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2018/02/handshake/</guid><description>Introduction HandShake is a project to help enable people who need to access software to create speech to be able to access this technology.
Many people who are unable to speak use specialist software to create speech. This software can often be operated using buttons or joysticks and is known as switchable software. Please see a more detailed explanation of this and a video showing one software package in my post Using the microbit to control switch access software.</description></item><item><title>posts</title><link>https://mattoppenheim.github.io/page/2018/02/posts/</link><pubDate>Thu, 15 Feb 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2018/02/posts/</guid><description/></item><item><title>Cowtoons</title><link>https://mattoppenheim.github.io/page/2018/02/cowtoons/</link><pubDate>Tue, 06 Feb 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2018/02/cowtoons/</guid><description>The Black Cow coffee shop in Croton in Hudson, New York, is one of my &amp;lsquo;Happy Places&amp;rsquo;, so I drew a few cowtoons.</description></item><item><title/><link>https://mattoppenheim.github.io/page/2018/01/introduction/</link><pubDate>Mon, 29 Jan 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2018/01/introduction/</guid><description>I re-purpose off the shelf hardware to create enabling technology. Many of my projects come from Beaumont College, Lancaster which has about 100 students with a variety of disabilities. I spend about half of the year working as a Geophysicist on marine seismic survey ships. I have an Honorary Researcher position at InfoLab21, Lancaster University during my time off where I work on the enabling technology projects.
My GitHub page is here.</description></item><item><title>Running pytest when the test files are in a different directory to the source files</title><link>https://mattoppenheim.github.io/post/2018/01/running-pytest-when-the-test-files-are-in-a-different-directory-to-the-source-files/</link><pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2018/01/running-pytest-when-the-test-files-are-in-a-different-directory-to-the-source-files/</guid><description>I had a battle to get my testing directory structure to work outside of an IDE. Please find my solution below. Tested on Windows 7 using python 3.6 and Linux Mint using python 3.4, running the code using the command line:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] python -m pytest test_compress_files.py [/code]
The file I wrote to be tested is called compress_files.py in a directory named \src. The file containing tests to be run using pytest is called test_compress_files.</description></item><item><title>Sending parameters to a Jupyter Notebook cell using click</title><link>https://mattoppenheim.github.io/post/2017/12/sending-parameters-to-a-jupyter-notebook-cell-using-click/</link><pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2017/12/sending-parameters-to-a-jupyter-notebook-cell-using-click/</guid><description>Using libraries such as click and optparse we can send parameters to Python scripts when we run them from the command line. For example, passing a parameter called count with a value of 2 to a script called hello.py:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] hello.py &amp;ndash;count=2 [/code]
How can I replicate this functionality in a cell of a Jupyter notebook? I like to run the same code in the notebook so that I can easily copy it to a stand alone script.</description></item><item><title>Bash script to mount and unmount a BBC Micro:bit</title><link>https://mattoppenheim.github.io/post/2017/11/bash-script-to-mount-and-unmount-a-bbc-microbit/</link><pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2017/11/bash-script-to-mount-and-unmount-a-bbc-microbit/</guid><description>I develop using the BBC Micro:bit (which I&amp;rsquo;ll call a microbit from now on) using Linux. To get a new hex file on to the microbit, the microbit has to be mounted on to the file system. Which may seem obvious. But the microbit has a habit of unmounting itself after being programmed. Or not mounting when it is plugged in. So I wrote a script to make things easier. Because I can.</description></item><item><title>Enabling the analog to digital converter (ADC) on the BBC Micro:bit using C/C++</title><link>https://mattoppenheim.github.io/post/2017/11/enabling-the-analog-to-digital-converter-adc-on-the-bbc-microbit-using-c-c/</link><pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2017/11/enabling-the-analog-to-digital-converter-adc-on-the-bbc-microbit-using-c-c/</guid><description>To get the example ADC code to work on the Lancaster Github site, change the line:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] MicroBitPin P0(MICROBIT_ID_IO_P0, MICROBIT_PIN_P0, PIN_CAPABILITY_BOTH); [/code]
To:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] MicroBitPin P0(MICROBIT_ID_IO_P0, MICROBIT_PIN_P0, PIN_CAPABILITY_ANALOG); [/code]
I tested this using both the online Mbed compiler and the yotta compiler.</description></item><item><title>Getting the BBC Micro:bit radio to work with the mbed online C/C++ compiler</title><link>https://mattoppenheim.github.io/post/2017/11/132/</link><pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2017/11/132/</guid><description>This blog explains how to get the example programs for working with the non-Bluetooth radio on the BBC Micro:bit to compile correctly using the Mbed online C/C++ compiler.
Short story Two options:
1 Place the line:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] #define MICROBIT_BLE_ENABLED 0 [/code]
in the MicroBit.h library and forget about the config.json file.
Or
2 Create an mbed_app.json file instead of the config.json file with this content:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] { &amp;ldquo;macros&amp;rdquo;: [ &amp;ldquo;MICROBIT_BLE_ENABLED=0&amp;rdquo; ] } [/code]</description></item><item><title>Setting up yotta and C with the BBC Micro:bit by modifying the examples directory</title><link>https://mattoppenheim.github.io/post/2017/11/setting-up-yotta-and-c-with-the-bbc-microbit-by-modifying-the-examples-directory/</link><pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2017/11/setting-up-yotta-and-c-with-the-bbc-microbit-by-modifying-the-examples-directory/</guid><description>I set up to program the BBC Micro:bit (which I&amp;rsquo;ll call the microbit from now on) in C/C++ under Linux. I&amp;rsquo;ve been using micropython to program the boards up to now, but want to leverage the increased performance that using C can give and some of the C libraries that are available for e.g. encryption.
There is good documentation on the Lancaster University microbit github page:
https://lancaster-university.github.io/microbit-docs/
I installed the offline tools as I spend a lot of time working at sea where you can&amp;rsquo;t always rely on having an internet connection.</description></item><item><title>eyeBlink - enabling natural two way conversation with somebody who uses an eyetracker</title><link>https://mattoppenheim.github.io/post/2017/07/eyeblink/</link><pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2017/07/eyeblink/</guid><description>It can be difficult to tell when a student who uses an eye tracker to operate their communications software is actively using the software. So the temptation is to go and look over their shoulder. The Head Technologist at Beaumont College asked if it is possible to have a light flash to indicate when the communications software is being used. This makes for a more natural two way conversation. You talk to the student and you see the light flashing, so you know that a reply is being composed.</description></item><item><title>Booting a new Lenovo Thinkpad from USB stick to use Clonezilla</title><link>https://mattoppenheim.github.io/post/2017/06/booting-a-new-lenovo-thinkpad-from-usb-stick-to-use-clonezilla/</link><pubDate>Wed, 28 Jun 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2017/06/booting-a-new-lenovo-thinkpad-from-usb-stick-to-use-clonezilla/</guid><description>All I wanted to do was boot from my trusty Clonezilla USB stick to make a system back up of my shiny new Thinkpad X260. Long story short, you need to disable the &amp;lsquo;Secure Boot&amp;rsquo; option in the UEFI (what used to be called BIOS) to boot from a bootable Clonezilla USB stick.
I bought the X260 a couple of month&amp;rsquo;s ago. This is last year&amp;rsquo;s model, so I got it at a discount.</description></item><item><title>Installing linux mint 18.1 onto a Lenovo 260 with an encrypted home drive</title><link>https://mattoppenheim.github.io/post/2017/04/installing-linux-mint-18-1-onto-a-lenovo-260-with-an-encrypted-home-drive/</link><pubDate>Tue, 18 Apr 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2017/04/installing-linux-mint-18-1-onto-a-lenovo-260-with-an-encrypted-home-drive/</guid><description>The simplest way I found to install Linux Mint 18.1 on to my Lenovo 260 with an encrypted home drive and a separate installation partition is to install the system using the simplest options, then afterwards encrypt your home drive and shrink down the installation partition using gparted. The rest of this post is how I failed to do this several times. Which is undoubtedly due to my lack of linux wisdom.</description></item><item><title>how to configure the accelerometer range on the microbit using micropython</title><link>https://mattoppenheim.github.io/post/2017/04/how-to-configure-the-accelerometer-range-on-the-microbit-using-micropython/</link><pubDate>Thu, 13 Apr 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2017/04/how-to-configure-the-accelerometer-range-on-the-microbit-using-micropython/</guid><description>This article details how to set the range of sensitivity on the accelerometer on the microbit board using micropython and the i2c interface. I am using v1.7.9 of micropython for the microbit, the mu editor and linux mint v17.
After listening to Joe Finney talk about his role in developing the microbit board I realised I could use it for some of my hand gesture assistive technology work. The accelerometer on the microbit board is an MMA8653FC, data sheet here.</description></item><item><title>parsing and unpacking python3 serial data containing double backslashes</title><link>https://mattoppenheim.github.io/post/2017/04/parsing-and-unpacking-python3-serial-data-containing-double-backslashes-2/</link><pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2017/04/parsing-and-unpacking-python3-serial-data-containing-double-backslashes-2/</guid><description>edit 11th October 2017: The &amp;rsquo;eval&amp;rsquo; statements in the code shown below can be replaced with the safer &amp;rsquo;literal_eval&amp;rsquo; from the ast class in the standard library. From the python docs: &amp;lsquo;Safely evaluate an expression node or a string containing a Python literal or container display. The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and None.&amp;rsquo;</description></item><item><title>parsing and unpacking python3 serial data containing double backslashes</title><link>https://mattoppenheim.github.io/post/2017/04/parsing-and-unpacking-python3-serial-data-containing-double-backslashes/</link><pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2017/04/parsing-and-unpacking-python3-serial-data-containing-double-backslashes/</guid><description>I lost a day of my life figuring out how to parse serial data sent as bytes from the BBC Microbit using micropython. The problem is that the data byte string appears with double backslash characters instead of single backslashes when read in over a serial interface. Actual data:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] b&amp;rsquo;ST\\x00\\x00\\x00\\xe0\\xeaE\\x00\\x00HB\\x00\\x00`\\xc3\\x00\\x00\\x10C\\x00\\x00t\\xc4EN&amp;rsquo; [/code]
What I wanted as data:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] b&amp;rsquo;ST\x00\x00\x00\xe0\xeaE\x00\x00HB\x00\x00`\xc3\x00\x00\x10C\x00\x00t\xc4EN&amp;rsquo; [/code]
So how to convert from one misformed byte string to the clean one that python 3 would use?</description></item><item><title>CD player for the visually impaired</title><link>https://mattoppenheim.github.io/post/2017/01/cd-player-for-the-visually-impaired/</link><pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2017/01/cd-player-for-the-visually-impaired/</guid><description>This blog details a method to allow somebody who is visually impaired to easily listen to their CD collection again. My Mother lost her eyesight through macular degeneration. She has a decent collection of classical music that she built up over a few years. But she can&amp;rsquo;t see well enough to easily use a CD player anymore. On top of that, her mobility is restricted. I bought her a Roberts Concerto 2 CD player and radio designed for the visually impaired.</description></item><item><title>EWMA filter example using pandas and python</title><link>https://mattoppenheim.github.io/post/2017/01/ewma-filter-example-using-pandas-and-python/</link><pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2017/01/ewma-filter-example-using-pandas-and-python/</guid><description>This article gives an example of how to use an exponentially weighted moving average filter to remove noise from a data set using the pandas library in python 3. I am writing this as the syntax for the library function has changed. The syntax I had been using is shown in Connor Johnoson&amp;rsquo;s well explained example here. I will give some example code, plot the data sets then explain the code.</description></item><item><title>XBee series 1 accelerometer sampling</title><link>https://mattoppenheim.github.io/post/2016/12/xbee-series-1-accelerometer-sampling/</link><pubDate>Wed, 28 Dec 2016 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2016/12/xbee-series-1-accelerometer-sampling/</guid><description>XBee modules have a built in ADC, so why not sample an analog accelerometer directly? This will allow me to make a smaller wireless accelerometer that I can strap to my participants for testing with. Long term I want a microcontroller in the system for onboard signal processing. But for initial data collection, the smaller and simpler the better. Make it work. Make it fast. Make it right.. I am using the ADXL335 analog output 3-axis accelerometer connected to D0, D1 and D2 of an XBee series 1.</description></item><item><title>Using pyzmq to communicate between GUIs and processes</title><link>https://mattoppenheim.github.io/post/2016/10/using-pyzmq-to-communicate-between-guis-and-processes/</link><pubDate>Sat, 01 Oct 2016 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2016/10/using-pyzmq-to-communicate-between-guis-and-processes/</guid><description>Graphical user interfaces (GUIs) all want to be the main thread. They don&amp;rsquo;t play well together. Trying to run GUIs built with different libraries concurrently and get them to talk to one another took me a while to figure out. This article shows how I used the pyzmq library to communicate between two graphical user interfaces (GUIs). I am working on unique hand gesture recognition. One GUI represents a hand position.</description></item><item><title>Fixing relative and absolute links in Word, Microsoft Office 2013, Office 2016, Office 2019</title><link>https://mattoppenheim.github.io/post/2016/09/fixing-relative-and-absolute-links-in-word-microsoft-office-2013/</link><pubDate>Fri, 16 Sep 2016 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2016/09/fixing-relative-and-absolute-links-in-word-microsoft-office-2013/</guid><description>This article explains how to replace absolute hyperlink references with relative ones, which makes your Microsoft Word document and linked files portable. So when you send them to a different computer, clicking on the hyperlink will open the file that you shipped with the Word document and not try to open the file that is on the computer where you wrote the document.
Say you are writing a final report for a survey and you have a link to the original contract, which is in a folder in the same directory as your report.</description></item><item><title>python - how to communicate between threads using pydispatcher</title><link>https://mattoppenheim.github.io/post/2016/08/python-how-to-communicate-between-threads-using-pydispatcher/</link><pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2016/08/python-how-to-communicate-between-threads-using-pydispatcher/</guid><description>The pydispatcher module makes it straight forwards to communicate between different threads in the same process in python.
Why would I want to do this?
I am collecting and processing sensor data from an accelerometer and want to display this real-time. The interface has some controls to save the data and to change the sampling rate of the sensor. Naturally, I want to interact with the user interface without having to wait for the sensor data to be collected and processed.</description></item><item><title>One minus alpha filter</title><link>https://mattoppenheim.github.io/post/2016/05/one-minus-alpha-filter/</link><pubDate>Fri, 13 May 2016 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/post/2016/05/one-minus-alpha-filter/</guid><description>I&amp;rsquo;ve got some real time accelerometer and gyroscope data coming in on my project to recognise hand gestures here. Naturally, I would like to be able to remove jitter and noise from the data as painlessly as possible. So we are into the world of real time digital filtering. Many books have been written on this subject and it is easy to dive &amp;lsquo;down the rabbit hole&amp;rsquo; and lose a lot of your life testing filters.</description></item><item><title>Using touch sensors and audio to help the visually impaired</title><link>https://mattoppenheim.github.io/page/2012/12/using-touch-sensors-and-audio-to-help-the-visually-impaired/</link><pubDate>Fri, 28 Dec 2012 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2012/12/using-touch-sensors-and-audio-to-help-the-visually-impaired/</guid><description>An article describing the hardware and firmware of this project is published in the May 2012 edition of Circuit Cellar, with code and circuit designs available from their ftp site. Details of testing are published in &amp;ldquo;Speech and Touch Enhanced Interface for the Visually Impaired&amp;rdquo; in the Journal of Assistive Technologies, Issue 3, 2013. A link to the academic article is here, however even I can&amp;rsquo;t access the pdf of the article as I don&amp;rsquo;t have a password for the journal, but you can read the abstract for free.</description></item><item><title>Arduino XKitz touch sensors</title><link>https://mattoppenheim.github.io/page/2012/11/arduino-xkitz-touch-sensors/</link><pubDate>Wed, 28 Nov 2012 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2012/11/arduino-xkitz-touch-sensors/</guid><description>The code for this project can be downloaded from github.
I used the Arduino Uno, Xkitz touch sensor shields and a USB shield connected to a Nexus One Android phone to add audio enhanced touch sensors to a radio. When a control is touched, an audio tag describing the function is played by the phone, but without the control having to be activated. This means that someone who is visually impaired can learn the layout.</description></item><item><title>mTouch capacitive touch sensor boards</title><link>https://mattoppenheim.github.io/page/2012/11/mtouch-capacitive-touch-sensor-boards/</link><pubDate>Wed, 28 Nov 2012 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2012/11/mtouch-capacitive-touch-sensor-boards/</guid><description>The boards and code described below can be downloaded from github.
I built a 16 channel touch sensor board built around the PIC16F727. This enables touch sensors to be easily added to your designs. Each touch sensor channel is brought out to a header pin which can be connected to a conductive pad to add touch sensitivity to a surface. I freely admit that the firmware is a simplified version of Microchip&amp;rsquo;s example code for their mTouch hardware, which I ported to MikroC Pro.</description></item><item><title>Dots - indoor service discovery using ultrasonics.</title><link>https://mattoppenheim.github.io/page/2012/05/dots/</link><pubDate>Thu, 10 May 2012 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2012/05/dots/</guid><description>Pushing forwards the frontiers of service discovery ultrasonically Dot with attached Particle and AAA battery These were developed for a proof of concept research project. Slap one of these onto every printer, fax, PDA and gadget. Then slip a Relate dongle into your laptop. As you walk around your building your software will automatically detect and locate each of the devices. The fancy schmancy interface allows you to locate the devices and share services - drag and drop documents for instance.</description></item><item><title>Cosmic neutron detector</title><link>https://mattoppenheim.github.io/page/2009/12/cosmic-neutron-detector/</link><pubDate>Mon, 28 Dec 2009 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2009/12/cosmic-neutron-detector/</guid><description>Detecting neutrons. Cosmically. Who doesn&amp;rsquo;t want to detect high enery neutrons? They can damage avionic electronics and potentially damage cells. A clever neutron detector was constructed by a team led by Dr Steve Monk at the Engineering Department, Lancaster University. The detector works when characteristic charges are created in it - from high energy neutrons interacting with a special boron coating. The signal produced in the photodetector is fed to a high frequency ADC.</description></item><item><title>Relate Cube - indoor positioning using ultrasonics</title><link>https://mattoppenheim.github.io/page/2009/12/relate-cube-indoor-positioning-using-ultrasonics/</link><pubDate>Mon, 28 Dec 2009 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/page/2009/12/relate-cube-indoor-positioning-using-ultrasonics/</guid><description>Relate Cube. After the Dots came the Cube. The Relate project required a prototype 3D ultrasonic ranging device. We also wanted enhanced embedded processing capability to enable the application of fancy algorithms to test out signal processing algorithms. So I designed and built the Cube. This has a dsPIC128GP706 16 bit digital signal processor (DSP) as an embedded processor. The basic cube consists of four stacked boards with a Teco Particle computer providing the wireless communications - this clips onto the Communications board on top of the device.</description></item></channel></rss>