<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>struct on mattoppenheim</title><link>https://mattoppenheim.github.io/tags/struct/</link><description>Recent content in struct on mattoppenheim</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Tue, 11 Apr 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://mattoppenheim.github.io/tags/struct/index.xml" rel="self" type="application/rss+xml"/><item><title>parsing and unpacking python3 serial data containing double backslashes</title><link>https://mattoppenheim.github.io/2017/04/11/parsing-and-unpacking-python3-serial-data-containing-double-backslashes-2/</link><pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/2017/04/11/parsing-and-unpacking-python3-serial-data-containing-double-backslashes-2/</guid><description>edit 11th October 2017: The &amp;rsquo;eval&amp;rsquo; statements in the code shown below can be replaced with the safer &amp;rsquo;literal_eval&amp;rsquo; from the ast class in the standard library. From the python docs: &amp;lsquo;Safely evaluate an expression node or a string containing a Python literal or container display. The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and None.&amp;rsquo;</description></item><item><title>parsing and unpacking python3 serial data containing double backslashes</title><link>https://mattoppenheim.github.io/2017/04/11/parsing-and-unpacking-python3-serial-data-containing-double-backslashes/</link><pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/2017/04/11/parsing-and-unpacking-python3-serial-data-containing-double-backslashes/</guid><description>I lost a day of my life figuring out how to parse serial data sent as bytes from the BBC Microbit using micropython. The problem is that the data byte string appears with double backslash characters instead of single backslashes when read in over a serial interface. Actual data:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] b&amp;rsquo;ST\\x00\\x00\\x00\\xe0\\xeaE\\x00\\x00HB\\x00\\x00`\\xc3\\x00\\x00\\x10C\\x00\\x00t\\xc4EN&amp;rsquo; [/code]
What I wanted as data:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] b&amp;rsquo;ST\x00\x00\x00\xe0\xeaE\x00\x00HB\x00\x00`\xc3\x00\x00\x10C\x00\x00t\xc4EN&amp;rsquo; [/code]
So how to convert from one misformed byte string to the clean one that python 3 would use?</description></item></channel></rss>