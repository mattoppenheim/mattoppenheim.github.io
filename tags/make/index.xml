<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>make on mattoppenheim</title><link>https://mattoppenheim.github.io/tags/make/</link><description>Recent content in make on mattoppenheim</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Tue, 29 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://mattoppenheim.github.io/tags/make/index.xml" rel="self" type="application/rss+xml"/><item><title>micro:bit c toolchain explained, part 2. yotta, file locations</title><link>https://mattoppenheim.github.io/2020/12/29/microbit-c-toolchain-explained-part-2-yotta-file-locations/</link><pubDate>Tue, 29 Dec 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/2020/12/29/microbit-c-toolchain-explained-part-2-yotta-file-locations/</guid><description>December 2020: I wrote this post when only v1 of the micro:bit existed. I haven&amp;rsquo;t yet checked to see if the contents are still valid for the toolchain used to program v2 of the micro:bit.
This article follows on from part 1 of my attempt to explain the chain of tools used to build your C code into something that can run on the BBC micro:bit. In this part, I will cover the yotta build tool and how the make build tool is used as the top level component.</description></item><item><title>Automating loading micropython code to the BBC micro:bit in Linux</title><link>https://mattoppenheim.github.io/2020/08/23/automating-loading-micropython-code-to-the-bbc-microbit-in-linux/</link><pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/2020/08/23/automating-loading-micropython-code-to-the-bbc-microbit-in-linux/</guid><description>Introduction When I edit micropython for a microbit project, I want the code to automagically load onto the microbit each time that I save the code. Then I want to see any messages from the microbit displayed. I worked out a toolchain that does this under Linux.
I summarise the toolchain in the next section, then go through each step in more detail.
For the examples in this post, I am editing a file called &amp;lsquo;feeder.</description></item><item><title>micro:bit C toolchain explained, part 1. ninja &amp; cmake.</title><link>https://mattoppenheim.github.io/2020/03/29/microbit-c-toolchain-make-ninja-cmake-explained/</link><pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/2020/03/29/microbit-c-toolchain-make-ninja-cmake-explained/</guid><description>December 2020: I wrote this post when only v1 of the micro:bit existed. I haven&amp;rsquo;t yet checked to see if the contents are still valid for the toolchain used to program v2 of the micro:bit.
I use the offline build tools from Lancaster University for compiling and building C-code for the BBC Micro:bit board. I used the toolset without really understanding what was going on under the hood. I spent some happy time fixing this.</description></item></channel></rss>