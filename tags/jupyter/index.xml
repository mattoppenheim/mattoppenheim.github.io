<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>jupyter on mattoppenheim</title><link>https://mattoppenheim.github.io/tags/jupyter/</link><description>Recent content in jupyter on mattoppenheim</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Fri, 16 Mar 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://mattoppenheim.github.io/tags/jupyter/index.xml" rel="self" type="application/rss+xml"/><item><title>Relative imports in Jupyter notebooks</title><link>https://mattoppenheim.github.io/2018/03/16/relative-imports-in-jupyter-notebooks/</link><pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/2018/03/16/relative-imports-in-jupyter-notebooks/</guid><description>How do we import a module from a .py or a .ipynb file into a Jupyter notebook from a different directory?
I wrote this post after answering a question on stackoverflow:
https://stackoverflow.com/questions/49282122/import-modules-in-jupyter-notebook-path/
For example, if we have the directory structure:
analysis.ipynb
/src/configuration.py
/src/configuration_nb.ipynb
How do we access the file configuration.py or the notebook configuration_nb.ipynb in the notebook analysis.ipynb?
The nbimporter module helps us here:
pip install nbimporter
contents of /src/configuration.py:</description></item><item><title>Sending parameters to a Jupyter Notebook cell using click</title><link>https://mattoppenheim.github.io/2017/12/15/sending-parameters-to-a-jupyter-notebook-cell-using-click/</link><pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/2017/12/15/sending-parameters-to-a-jupyter-notebook-cell-using-click/</guid><description>Using libraries such as click and optparse we can send parameters to Python scripts when we run them from the command line. For example, passing a parameter called count with a value of 2 to a script called hello.py:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] hello.py &amp;ndash;count=2 [/code]
How can I replicate this functionality in a cell of a Jupyter notebook? I like to run the same code in the notebook so that I can easily copy it to a stand alone script.</description></item></channel></rss>