<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on mattoppenheim</title><link>https://mattoppenheim.github.io/tags/python/</link><description>Recent content in python on mattoppenheim</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Fri, 25 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://mattoppenheim.github.io/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Remove spikes from a dataset using python</title><link>https://mattoppenheim.github.io/remove-spikes-from-a-dataset-using-python/</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/remove-spikes-from-a-dataset-using-python/</guid><description>Problem How to remove random spikes from data.
Summary Using the pandas library in python we can remove random spikes from data. For this blog, I create a sine wave with random spikes then show the steps used to remove the spikes.
This blog is based on an answer I posted to a Stackoverflow question at:
https://stackoverflow.com/questions/37556487/remove-spikes-from-signal-in-python
A solution Here&amp;rsquo;s a general method for removing spikes from data. The code is at the end of this post.</description></item><item><title>Accessing Smartbox Grid 3 using Python and win32gui</title><link>https://mattoppenheim.github.io/accessing-smartbox-grid-3-using-python-and-win32gui/</link><pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/accessing-smartbox-grid-3-using-python-and-win32gui/</guid><description>Summary Smartbox&amp;rsquo;s Grid 3 communication software creates two windows containing the words &amp;lsquo;Grid 3&amp;rsquo; in their titles, even though you can only see one. If you are trying to interact with this software using your own program, you need to make sure to access the window that you intend to.
Problem I wrote some Python code to detect the use of Grid 3 or Tobii&amp;rsquo;s Communicator software for this project, to visually show when somebody who uses eyegaze technology interacts with the software.</description></item><item><title>Configuring a Python virtualenv in Debian</title><link>https://mattoppenheim.github.io/configuring-a-python-virtualenv-in-debian/</link><pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/configuring-a-python-virtualenv-in-debian/</guid><description>Python virtual environments are a good idea. Naturally, I had a few problems getting mine to work properly. I found that my globally installed libraries were visible the activated venv. The whole point of a venv is to isolate libraries. The globally installed libraries that are not also explicitly installed in the venv should not be usable.
I use Debian and the bash shell.
So how did I fix what I found is a common problem?</description></item><item><title>pytest and relative imports part 2</title><link>https://mattoppenheim.github.io/pytest-and-relative-imports-part-2/</link><pubDate>Wed, 16 Jan 2019 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/pytest-and-relative-imports-part-2/</guid><description>I had another tussle with getting pytest to recognise where the modules to be tested are relative to the directory where the testing code is. I use the eclipse IDE for coding. This time I resolved the issue using relative imports. Last time I tried adding the directory where testing code is to the system path. This is detailed in my post here.
This time I realised that I could solve the issue using relative imports correctly.</description></item><item><title>Using tkinter and python to continuously display the output from a system command</title><link>https://mattoppenheim.github.io/using-tkinter-and-python-to-continuously-display-the-output-from-a-system-command/</link><pubDate>Sun, 24 Jun 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/using-tkinter-and-python-to-continuously-display-the-output-from-a-system-command/</guid><description>I put an answer to a stackoverflow question. The poster wanted to display the output from a &amp;rsquo;netstat&amp;rsquo; command every second. I suggested using a tkinter screen. To run the nestat command every second, the command line entry would be &amp;rsquo;netstat 1&amp;rsquo;. This is fed to a subprocess. This subprocess is wrapped in a thread to avoid blocking the main thread. The main thread needs to be left to deal with the tkinter display.</description></item><item><title>Sublime Text 3, adding a custom python 3 build</title><link>https://mattoppenheim.github.io/sublime-text-3-adding-a-custom-python-3-build/</link><pubDate>Tue, 22 May 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/sublime-text-3-adding-a-custom-python-3-build/</guid><description>Typing &amp;lsquo;python&amp;rsquo; at the command line of my Linux Mint 18 install gives me a python 2.7 prompt. So when I run a python script in Sublime Text, it was built using Python 2.7. But I want to use python 3! So I entered a custom python 3 build.
I use Linux Mint 18. The &amp;ldquo;shell_cmd&amp;rdquo; mentioned below will be different for Windows and maybe for Mac OS as well.</description></item><item><title>Python 3, threading and references</title><link>https://mattoppenheim.github.io/python-3-threading-and-references/</link><pubDate>Thu, 17 May 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/python-3-threading-and-references/</guid><description>Creating a thread I used threading to enable real-time graphing of data from sensors. One thread collected data from the sensors. The main thread ran the real time graph. I had a few problems getting started. It came down to my incorrect use of brackets when creating the thread.
When we create a thread using the threading library, we need to pass the target to the thread without using brackets. e.</description></item><item><title>Relative imports in Jupyter notebooks</title><link>https://mattoppenheim.github.io/relative-imports-in-jupyter-notebooks/</link><pubDate>Fri, 16 Mar 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/relative-imports-in-jupyter-notebooks/</guid><description>How do we import a module from a .py or a .ipynb file into a Jupyter notebook from a different directory?
I wrote this post after answering a question on stackoverflow:
https://stackoverflow.com/questions/49282122/import-modules-in-jupyter-notebook-path/
For example, if we have the directory structure:
analysis.ipynb
/src/configuration.py
/src/configuration_nb.ipynb
How do we access the file configuration.py or the notebook configuration_nb.ipynb in the notebook analysis.ipynb?
The nbimporter module helps us here:
pip install nbimporter
contents of /src/configuration.py:</description></item><item><title>Running pytest when the test files are in a different directory to the source files</title><link>https://mattoppenheim.github.io/running-pytest-when-the-test-files-are-in-a-different-directory-to-the-source-files/</link><pubDate>Thu, 04 Jan 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/running-pytest-when-the-test-files-are-in-a-different-directory-to-the-source-files/</guid><description>I had a battle to get my testing directory structure to work outside of an IDE. Please find my solution below. Tested on Windows 7 using python 3.6 and Linux Mint using python 3.4, running the code using the command line:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] python -m pytest test_compress_files.py [/code]
The file I wrote to be tested is called compress_files.py in a directory named \src. The file containing tests to be run using pytest is called test_compress_files.</description></item><item><title>Sending parameters to a Jupyter Notebook cell using click</title><link>https://mattoppenheim.github.io/sending-parameters-to-a-jupyter-notebook-cell-using-click/</link><pubDate>Fri, 15 Dec 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/sending-parameters-to-a-jupyter-notebook-cell-using-click/</guid><description>Using libraries such as click and optparse we can send parameters to Python scripts when we run them from the command line. For example, passing a parameter called count with a value of 2 to a script called hello.py:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] hello.py &amp;ndash;count=2 [/code]
How can I replicate this functionality in a cell of a Jupyter notebook? I like to run the same code in the notebook so that I can easily copy it to a stand alone script.</description></item><item><title>how to configure the accelerometer range on the microbit using micropython</title><link>https://mattoppenheim.github.io/how-to-configure-the-accelerometer-range-on-the-microbit-using-micropython/</link><pubDate>Thu, 13 Apr 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/how-to-configure-the-accelerometer-range-on-the-microbit-using-micropython/</guid><description>This article details how to set the range of sensitivity on the accelerometer on the microbit board using micropython and the i2c interface. I am using v1.7.9 of micropython for the microbit, the mu editor and linux mint v17.
After listening to Joe Finney talk about his role in developing the microbit board I realised I could use it for some of my hand gesture assistive technology work. The accelerometer on the microbit board is an MMA8653FC, data sheet here.</description></item><item><title>parsing and unpacking python3 serial data containing double backslashes</title><link>https://mattoppenheim.github.io/parsing-and-unpacking-python3-serial-data-containing-double-backslashes-2/</link><pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/parsing-and-unpacking-python3-serial-data-containing-double-backslashes-2/</guid><description>edit 11th October 2017: The &amp;rsquo;eval&amp;rsquo; statements in the code shown below can be replaced with the safer &amp;rsquo;literal_eval&amp;rsquo; from the ast class in the standard library. From the python docs: &amp;lsquo;Safely evaluate an expression node or a string containing a Python literal or container display. The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and None.&amp;rsquo;</description></item><item><title>parsing and unpacking python3 serial data containing double backslashes</title><link>https://mattoppenheim.github.io/parsing-and-unpacking-python3-serial-data-containing-double-backslashes/</link><pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/parsing-and-unpacking-python3-serial-data-containing-double-backslashes/</guid><description>I lost a day of my life figuring out how to parse serial data sent as bytes from the BBC Microbit using micropython. The problem is that the data byte string appears with double backslash characters instead of single backslashes when read in over a serial interface. Actual data:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] b&amp;rsquo;ST\\x00\\x00\\x00\\xe0\\xeaE\\x00\\x00HB\\x00\\x00`\\xc3\\x00\\x00\\x10C\\x00\\x00t\\xc4EN&amp;rsquo; [/code]
What I wanted as data:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] b&amp;rsquo;ST\x00\x00\x00\xe0\xeaE\x00\x00HB\x00\x00`\xc3\x00\x00\x10C\x00\x00t\xc4EN&amp;rsquo; [/code]
So how to convert from one misformed byte string to the clean one that python 3 would use?</description></item><item><title>EWMA filter example using pandas and python</title><link>https://mattoppenheim.github.io/ewma-filter-example-using-pandas-and-python/</link><pubDate>Mon, 09 Jan 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/ewma-filter-example-using-pandas-and-python/</guid><description>This article gives an example of how to use an exponentially weighted moving average filter to remove noise from a data set using the pandas library in python 3. I am writing this as the syntax for the library function has changed. The syntax I had been using is shown in Connor Johnoson&amp;rsquo;s well explained example here. I will give some example code, plot the data sets then explain the code.</description></item><item><title>Using pyzmq to communicate between GUIs and processes</title><link>https://mattoppenheim.github.io/using-pyzmq-to-communicate-between-guis-and-processes/</link><pubDate>Sat, 01 Oct 2016 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/using-pyzmq-to-communicate-between-guis-and-processes/</guid><description>Graphical user interfaces (GUIs) all want to be the main thread. They don&amp;rsquo;t play well together. Trying to run GUIs built with different libraries concurrently and get them to talk to one another took me a while to figure out. This article shows how I used the pyzmq library to communicate between two graphical user interfaces (GUIs). I am working on unique hand gesture recognition. One GUI represents a hand position.</description></item><item><title>python - how to communicate between threads using pydispatcher</title><link>https://mattoppenheim.github.io/python-how-to-communicate-between-threads-using-pydispatcher/</link><pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/python-how-to-communicate-between-threads-using-pydispatcher/</guid><description>The pydispatcher module makes it straight forwards to communicate between different threads in the same process in python.
Why would I want to do this?
I am collecting and processing sensor data from an accelerometer and want to display this real-time. The interface has some controls to save the data and to change the sampling rate of the sensor. Naturally, I want to interact with the user interface without having to wait for the sensor data to be collected and processed.</description></item></channel></rss>