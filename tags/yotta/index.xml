<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>yotta on mattoppenheim</title><link>https://mattoppenheim.github.io/tags/yotta/</link><description>Recent content in yotta on mattoppenheim</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Tue, 23 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://mattoppenheim.github.io/tags/yotta/index.xml" rel="self" type="application/rss+xml"/><item><title>micro:bit v1 with yotta - removing build warnings</title><link>https://mattoppenheim.github.io/microbit-v1-with-yotta-removing-build-warnings/</link><pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/microbit-v1-with-yotta-removing-build-warnings/</guid><description>problem Running yotta build with the micro:bit v1 C tools produces screenfulls of depreceation warnings, such as:
warning: dynamic exception specifications are deprecated in C++11 [-Wdeprecated]
This makes it hard to find the error messages with the reason why the build failed.
solution Tell the C++ compiler not to include depreceation warnings.
instructions Add the compiler flag -Wno-deprecated to the CMAKE_CXX_FLAGS_INIT options in the file toolchain.cmake.
File location:
&amp;lt;project&amp;gt;/yotta_targets/bbc-microbit-classic-gcc/CMake/toolchain.cmake&amp;gt;/yotta_targets/bbc-microbit-classic-gcc/CMake/toolchain.cmake Line before:</description></item><item><title>micro:bit c toolchain explained, part 2. yotta, file locations</title><link>https://mattoppenheim.github.io/microbit-c-toolchain-explained-part-2-yotta-file-locations/</link><pubDate>Tue, 29 Dec 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/microbit-c-toolchain-explained-part-2-yotta-file-locations/</guid><description>December 2020: I wrote this post when only v1 of the micro:bit existed. I haven&amp;rsquo;t yet checked to see if the contents are still valid for the toolchain used to program v2 of the micro:bit.
This article follows on from part 1 of my attempt to explain the chain of tools used to build your C code into something that can run on the BBC micro:bit. In this part, I will cover the yotta build tool and how the make build tool is used as the top level component.</description></item><item><title>micro:bit C toolchain explained, part 1. ninja &amp; cmake.</title><link>https://mattoppenheim.github.io/microbit-c-toolchain-make-ninja-cmake-explained/</link><pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/microbit-c-toolchain-make-ninja-cmake-explained/</guid><description>December 2020: I wrote this post when only v1 of the micro:bit existed. I haven&amp;rsquo;t yet checked to see if the contents are still valid for the toolchain used to program v2 of the micro:bit.
I use the offline build tools from Lancaster University for compiling and building C-code for the BBC Micro:bit board. I used the toolset without really understanding what was going on under the hood. I spent some happy time fixing this.</description></item><item><title>Eclipse, yotta, C/C++ and the BBC Micro:bit</title><link>https://mattoppenheim.github.io/eclipse-yotta-c-c-and-the-bbc-microbit/</link><pubDate>Fri, 04 May 2018 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/eclipse-yotta-c-c-and-the-bbc-microbit/</guid><description>With the help of the excellent instructions at the link below I set up Eclipse with yotta to compile C code for the BBC micro:bit under Linux: http://flames-of-code.netlify.com/blog/microbit-cpp-3/ I get the debugger window to come up, but have not yet used this feature in anger. The writer, achary, clearly knows more about Eclipse and embedded programming than I do. I got a little stuck at a couple of stages so created this page to pass on my solutions.</description></item><item><title>Enabling the analog to digital converter (ADC) on the BBC Micro:bit using C/C++</title><link>https://mattoppenheim.github.io/enabling-the-analog-to-digital-converter-adc-on-the-bbc-microbit-using-c-c/</link><pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/enabling-the-analog-to-digital-converter-adc-on-the-bbc-microbit-using-c-c/</guid><description>To get the example ADC code to work on the Lancaster Github site, change the line:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] MicroBitPin P0(MICROBIT_ID_IO_P0, MICROBIT_PIN_P0, PIN_CAPABILITY_BOTH); [/code]
To:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] MicroBitPin P0(MICROBIT_ID_IO_P0, MICROBIT_PIN_P0, PIN_CAPABILITY_ANALOG); [/code]
I tested this using both the online Mbed compiler and the yotta compiler.</description></item><item><title>Getting the BBC Micro:bit radio to work with the mbed online C/C++ compiler</title><link>https://mattoppenheim.github.io/132/</link><pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/132/</guid><description>This blog explains how to get the example programs for working with the non-Bluetooth radio on the BBC Micro:bit to compile correctly using the Mbed online C/C++ compiler.
Short story Two options:
1 Place the line:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] #define MICROBIT_BLE_ENABLED 0 [/code]
in the MicroBit.h library and forget about the config.json file.
Or
2 Create an mbed_app.json file instead of the config.json file with this content:
[code language=&amp;ldquo;shell&amp;rdquo; light=&amp;ldquo;true&amp;rdquo;] { &amp;ldquo;macros&amp;rdquo;: [ &amp;ldquo;MICROBIT_BLE_ENABLED=0&amp;rdquo; ] } [/code]</description></item><item><title>Setting up yotta and C with the BBC Micro:bit by modifying the examples directory</title><link>https://mattoppenheim.github.io/setting-up-yotta-and-c-with-the-bbc-microbit-by-modifying-the-examples-directory/</link><pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/setting-up-yotta-and-c-with-the-bbc-microbit-by-modifying-the-examples-directory/</guid><description>I set up to program the BBC Micro:bit (which I&amp;rsquo;ll call the microbit from now on) in C/C++ under Linux. I&amp;rsquo;ve been using micropython to program the boards up to now, but want to leverage the increased performance that using C can give and some of the C libraries that are available for e.g. encryption.
There is good documentation on the Lancaster University microbit github page:
https://lancaster-university.github.io/microbit-docs/
I installed the offline tools as I spend a lot of time working at sea where you can&amp;rsquo;t always rely on having an internet connection.</description></item></channel></rss>