<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>micropython on mattoppenheim</title><link>https://mattoppenheim.github.io/tags/micropython/</link><description>Recent content in micropython on mattoppenheim</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Tue, 05 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://mattoppenheim.github.io/tags/micropython/index.xml" rel="self" type="application/rss+xml"/><item><title>Setting up mu-editor with the BBC micro:bit v1 on Linux</title><link>https://mattoppenheim.github.io/2021/01/05/setting-up-mu-editor-with-the-bbc-microbit-on-linux/</link><pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/2021/01/05/setting-up-mu-editor-with-the-bbc-microbit-on-linux/</guid><description>I recently set up an installation of Debian 10 and set up a tool chain for programming the BBC micro:bit with micropython. I&amp;rsquo;d forgotten some of the stumbling blocks I had the last time I did this, so am recording them here. Hopefully, this post will help you avoid them.
I use to represent the user name that I log in with.
The instructions in this blog get you set up to work with the micro:bit v1 using mu-editor.</description></item><item><title>BBC micro:bit guinea pig timed feeder instructions</title><link>https://mattoppenheim.github.io/2020/09/08/bbc-microbit-activating-a-servo-motor-using-a-timer/</link><pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/2020/09/08/bbc-microbit-activating-a-servo-motor-using-a-timer/</guid><description>This blog post is the instructions on how to use a timed servo motor circuit that I lashed up as part of a guinea pig feeder for a friend.
The hardware details can be found here: here
Software is on my GitHub site here
The need A friend wanted something to open a box of food to feed his guinea pigs. The box needs to open after an adjustable time.</description></item><item><title>Automating loading micropython code to the BBC micro:bit in Linux</title><link>https://mattoppenheim.github.io/2020/08/23/automating-loading-micropython-code-to-the-bbc-microbit-in-linux/</link><pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/2020/08/23/automating-loading-micropython-code-to-the-bbc-microbit-in-linux/</guid><description>Introduction When I edit micropython for a microbit project, I want the code to automagically load onto the microbit each time that I save the code. Then I want to see any messages from the microbit displayed. I worked out a toolchain that does this under Linux.
I summarise the toolchain in the next section, then go through each step in more detail.
For the examples in this post, I am editing a file called &amp;lsquo;feeder.</description></item><item><title>how to configure the accelerometer range on the microbit using micropython</title><link>https://mattoppenheim.github.io/2017/04/13/how-to-configure-the-accelerometer-range-on-the-microbit-using-micropython/</link><pubDate>Thu, 13 Apr 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/2017/04/13/how-to-configure-the-accelerometer-range-on-the-microbit-using-micropython/</guid><description>This article details how to set the range of sensitivity on the accelerometer on the microbit board using micropython and the i2c interface. I am using v1.7.9 of micropython for the microbit, the mu editor and linux mint v17.
After listening to Joe Finney talk about his role in developing the microbit board I realised I could use it for some of my hand gesture assistive technology work. The accelerometer on the microbit board is an MMA8653FC, data sheet here.</description></item><item><title>parsing and unpacking python3 serial data containing double backslashes</title><link>https://mattoppenheim.github.io/2017/04/11/parsing-and-unpacking-python3-serial-data-containing-double-backslashes-2/</link><pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate><guid>https://mattoppenheim.github.io/2017/04/11/parsing-and-unpacking-python3-serial-data-containing-double-backslashes-2/</guid><description>edit 11th October 2017: The &amp;rsquo;eval&amp;rsquo; statements in the code shown below can be replaced with the safer &amp;rsquo;literal_eval&amp;rsquo; from the ast class in the standard library. From the python docs: &amp;lsquo;Safely evaluate an expression node or a string containing a Python literal or container display. The string or node provided may only consist of the following Python literal structures: strings, bytes, numbers, tuples, lists, dicts, sets, booleans, and None.&amp;rsquo;</description></item></channel></rss>